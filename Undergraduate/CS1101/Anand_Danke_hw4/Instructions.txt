CS 1101 - Aterm 17
Homework 4 - Binary Search Trees
Due: Tuesday, September 26 at 5pm
Read the expectations on homework.

Assignment Goals
To make sure you can write data definitions for binary search trees.
To make sure you can write programs over binary search trees.

Preliminaries
An important variant of the binary tree is the binary search tree. In a binary search tree, the tree is organized such that the key in any given node of the tree meets the conditions that the values of all keys in the node's left subtree are less than the key in the given node, and the values of all the keys in the node's right subtree are greater than the key in the given node. This organization makes the task of searching the tree more efficient (in terms of the number of comparisons needed to find a given key) than would be the case for a regular binary tree. This property (smaller values in the left subtree, greater values in the right subtree) is called the invariant of the binary search tree.

Make sure you name your structs and functions exactly the same as the names given in the problems below. Otherwise, our auto-tester won't work and you'll lose points on the assignment.

Copy/paste your work from Lab 4 (Problems 1 - 5) into your HW4 file and continue with the remaining problems in the assignment.

The Assignment

A credit card company keeps information on its cardholders. In order to provide efficient access to the data, the designer of the database decides to store information about cardholders in a binary search tree. In addition to the components that provide access to the left and right branches of the tree, each node in the tree contains a unique credit card number (the key value), the customer's contact information, the credit limit, and a list of outstanding charges. A customer's contact information consists of the customer's name, address, and email address (all strings). A charge consists of the name of the business where the credit card was used, and the amount that was charged.

1. Write the data definitions for Contact, and Charge and ListOfCharge. The name of the struct for Contact should be contact, and the name of the struct for Charge should be charge. Provide at least two examples of Contact. Provide at least two examples of ListOfCharge. When creating your examples, the address portion of your contact information doesn't have to be a complete address; for the purposes of this assignment, you may simply put in a street address (like "100 Institute Ave") instead of an entire address (like "100 Institute Ave, Worcester, MA 01609").

2. Write the templates for Contact, Charge, and ListOfCharge.

3. Use this data definition for your binary search tree:
;; a BST is one of
;;   false
;;   CustNode

;; a CustNode is a (make-customer Natural Contact Number ListOfCharge BST BST)
(define-struct customer (card-number contact limit charges left right))
Write the interpretation for a BST (including the invariant).

4. Provide an example of a binary search tree containing information for at least 5 customers. Make sure you construct your example so that the customers are placed in the tree according to card number, satisfying the binary search tree invariant. When creating your examples, you don't have to use 16-digit credit card numbers like you might find on a real credit card; you may use small numbers like 123 or 9341.

5. Write the template(s) for the data definition in Problem 3.

6. Write a function count-big-limits which consumes a binary search tree and a credit limit amount, and counts the number of customers in the tree who have a credit limit higher than the given amount.

7. Write a function any-over-limit? that consumes a binary search tree and produces true if any customer in the tree has an outstanding balance greater than their credit limit. A customer's balance is calculated by summing the amounts of all purchases that they've charged.

8. Write a function increase-limit. The function consumes a binary search tree, a credit card number, and an amount of money. The function returns a tree the same as the original, except that the credit limit of the customer with the given credit card number has been increased by the given amount. Your function should be written efficiently, taking advantage of the binary search tree invariant to minimize the number of comparisons needed to find the customer with the correct credit card number. You may assume that the given credit card number exists in the tree.

9. Write a function add-customer. The function consumes a binary search tree, a credit card number, and a customer's contact information. The function returns a tree with a new customer added. The new customer has the given credit card number and contact information, a credit limit of $25,000, and an empty list of charges. Make sure that the tree that is produced is a binary search tree. You may assume that the credit card number does not already exist in the given tree. (Hint: new items are always added at the "leaf" end of the tree. Items are never inserted into the middle layers of a binary search tree.)

Grading
By now you should know what we expect on the homework, so the grading rubric will no longer be provided in advance.

What to Turn In
Submit your .rkt file to InstructAssist. Name your file according to the naming conventions for homework files. Make sure both partners' names and wpi login names appear in a comment at the top of the file.


